# AMaaS Core SDK for JavaScript

This is the Asset Management as a Service ([AMaaS](https://amaas.com/)) Software Development Kit (SDK) for JavaScript.
This module can be used in Node.js (version >= 4.0) and in browsers.

## What is AMaaS?

AMaaS is a modular platform for Asset Managers with an open, RESTful API for programmatic access to its functionality.

AMaaS Core features a secure, encrypted database, which serves as the foundation for asset management platforms and FinTech solutions. AMaaS also provides portfolio visualizations and analytics through AMaaS Web, and exception management & financial event notification through AMaaS Monitor.

## Tests

Install dependencies:
```
$ npm install
```

Running tests that do not require API access
```
$ npm test -- 'src\/(?!utils)'
```

Running full tests (requires API_TOKEN)
```
$ API_TOKEN=xxxxx npm test
```

# Docs

{{!--
## Auth
Authentication in the SDK is handled by AWS Cognito. In order to make API calls, you will need to become an authenticated user. The AMaaS Core Classes are open source and do not require authentication to use.

### Get Authenticated
To authorise usage of the SDK, you will need an AMaaS account. Please contact <support@amaas.com> for information on how to sign up.

### Auth Usage

In order to make API calls from the SDK, an ID Token is required. This token is generated by AWS Cognito and expires every hour. In order to refresh the token, a Refresh Token is used. This expires every XXh and once this expires, you will need to re-authenticate.
The AMaaS Core SDK for JavaScript uses the official [AWS Cognito SDK for JavaScript] (https://github.com/aws/aws-sdk-js) to handle the token generation for you. A special `authenticate` function is provided by this SDK to generate the necessary tokens. (TODO: this function)
Depending on the environment that it is being used in, the tokens returned are stored in different manners:

#### Browser
In the browser, the token set is stored in localStorage. When you make an API call from this SDK in a browser environment, it will automatically:
1. Check localStorage for the presence of tokens
2. Check the validity of the ID Token
  * If it is still valid, the API call will be made.
  * If it is expired, it will attempt to refresh it using the Refresh Token. If the Refresh Token has expired, you will need to call the `authenticate` function again. Otherwise, the renewed ID Token will be returned and the API call will succeed automatically.

#### Node
In Node, the token set is stored in memory. When you make an API call from this SDK in a Node environment, it will automatically:
1. Check the in-memory location for the presence of tokens
2. Check the validity of the ID Token
  * If it is still valid, the API call will be made.
  * If it is expired, it will attempt to refresh it using the Refresh Token. If the Refresh Token has expired, there are two options:
    * you call the `authenticate` function again to re-authenticate
    * if you are always authenticating with the same credentials, you can save these in a local file named `amaas.js` in your home (`~`) directory. Alternatively you may save it in a custom location and set this location in `api.config()`:
    ```
    api.config({
      credentialsPath: '/Path/to/credentials/file'
    })
    ```
--}}

## Numbers in the AMaaS Core SDK for JavaScript
Numbers are handled by the [decimal.js](https://github.com/MikeMcl/decimal.js/) package. All numbers in the classes are stored as Decimal instances. For a full list of functions available on these numbers please refer to the decmial.js documentation.

### Common functions
Note that the decimal.js functions return Decimal instances and are immutable (you will need to assign results of arithmetic operations to new variables).

```javascript
let x = new Decimal(5)
let y = new Decimal(10)

const a = x.plus(y) // a = 15
const b = x.times(y) // b = 50
const c = y.minus(x) // c = 5
const d = y.dividedBy(x) // d = 2
```
Returning a Decimal to a string
```javascript
let x = new Decimal(3.14)

const a = x.toFixed(5) // a = '3.14000'
const b = x.toPrecision(5) // b = '3.1400'
```

{{>main}}

## Contribution

If you would like to contribute, please fork the repo and send in a pull request.

## Support

For support with the SDKs, please raise issues on GitHub. The AMaaS team can be contacted at <support@amaas.com>. Customers who have purchased a support plan can find the contact details within AMaaS Admin.

## License

[Apache License](https://raw.githubusercontent.com/amaas-fintech/amaas-core-sdk-js/master/LICENSE)
